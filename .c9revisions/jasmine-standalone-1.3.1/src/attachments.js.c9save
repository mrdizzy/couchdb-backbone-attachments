{"ts":1361361362355,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Backbone.Model.Attachment = Backbone.Model.extend({})\n\nBackbone.Collection.Attachments = Backbone.Collection.extend({\n    model: Backbone.Model.Attachment\n})\n\nBackbone.Model.CouchDB = Backbone.Model.extend({\n    defaults: {\n        \"_attachments\": new Backbone.Collection.Attachments,\n        \"attachments_order\": []\n    },\n    parse: function(resp) {\n        var parsed_attachments = _.map(resp._attachments, function(value, key, list) {\n            return {\n                id: key,\n                content_type: list[key].content_type,\n                length: list[key].length,\n            }\n        }, this)\n        if (this.get(\"_attachments\") instanceof Backbone.Collection.Attachments) {\n            resp._attachments = this.get(\"_attachments\").reset(parsed_attachments)\n        }\n        else {\n            resp._attachments = new Backbone.Collection.Attachments(parsed_attachments)\n        }\n        resp._attachments.url = this.url() + \"/attachments\"\n        return resp;\n    },\n    updateAttachmentsOrder: function(new_order) {\n        this.save({\n            \"attachments_order\": new_order\n        }, {\n            patch: true\n        });\n    },\n    idAttribute: \"_id\"\n});\n\n\nfunction makeDroppable(el,model) {\n    // We need this to prevent the browser using its standard default when you drag over\n    el.addEventListener('dragover', function(e) {\n        e.preventDefault();\n    });\n\n    el.addEventListener('drop', function(e) {\n        e.preventDefault();\n\n       \n            var file =  e.dataTransfer.files[0];\n            var reader = new FileReader();\n            reader.onload = function() {\n                model.set(\"binary\", this.result);\n                model.save();\n               // $('img').remove()\n                //$('<img>').attr('title', file.name).attr('src', this.result).css('width', '50px').appendTo(el);\n            };\n            reader.readAsBinaryString(file);\n        \n    });\n\n}\n// VIEW \n// Attachments\n\nBackbone.View.Attachments = Backbone.View.extend({\n    initialize: function() {\n        this.model.get(\"_attachments\").on(\"add\", this.addAttachment, this)\n    },\n    // addAttachment is called whenever the addAttachment() method from the \n    // parent view class (below) is called. \n    addAttachment: function(model) {\n        var v = new this.options.view({\n            attributes: {\n                id: model.cid\n            },\n            model: model\n        });\n        v.listenTo(model, 'destroy', v.remove)\n        this.$el.append(v.render().el)\n    },\n    render: function() {\n        var that = this;\n        this.$el.empty();\n\n        this.model.get(\"attachments_order\").forEach(function(key) {\n            var subview = new that.options.view({\n                attributes: {\n                    id: key\n                },\n                model: that.model.get(\"_attachments\").get(key)\n            }).render()\n            makeDroppable(subview.el, that.model.get(\"_attachments\").get(key))\n            that.$el.append(subview.el);\n        })\n        return this;\n    }\n})\n\n// VIEW \n// CouchDB Model\n//\n\n\nBackbone.View.CouchDB = Backbone.View.extend({\n    // \n    addAttachment: function() {\n        this.model.get(\"_attachments\").add({})\n    },\n\n    // Extend this view and then call buildAttachments(view) from within the \n    // extended view's render() method, passing it an extended Backbone view\n    // to render each individual attachment. b\n    buildAttachments: function(view) {\n        var that = this;\n        var rendered_view = new Backbone.View.Attachments({\n            model: this.model,\n            view: view\n        })\n        var element = rendered_view.render().$el\n        element.sortable({\n            update: function(event, ui) {\n                that.model.updateAttachmentsOrder($(this).sortable(\"toArray\"));\n            }\n        })\n\n        return rendered_view.render().el\n    }\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":3870}]],"length":3870}
{"contributors":[],"silentsave":false,"ts":1361361370851,"patch":[[{"diffs":[[0,"nd({"],[-1,"})\n\nBackbone.Collection.Attachments = Backbone.Collection.extend({\n    model: Backbone.Model.Attachment\n})\n\nBackbone.Model.CouchDB = Backbone.Model.extend({\n    defaults: {\n        \"_attachments\": new Backbone.Collection.Attachments,\n        \"attachments_order\": []\n    },\n    parse: function(resp) {\n        var parsed_attachments = _.map(resp._attachments, function(value, key, list) {\n            return {\n                id: key,\n                content_type: list[key].content_type,\n                length: list[key].length,\n            }\n        }, this)\n        if (this.get(\"_attachments\") instanceof Backbone.Collection.Attachments) {\n            resp._attachments = this.get(\"_attachments\").reset(parsed_attachments)\n        }\n        else {\n            resp._attachments = new Backbone.Collection.Attachments(parsed_attachments)\n        }\n        resp._attachments.url = this.url() + \"/attachments\"\n        return resp;\n    },\n    updateAttachmentsOrder: function(new_order) {\n        this.save({\n            \"attachments_order\": new_order\n        }, {\n            patch: true\n        });\n    },\n    idAttribute: \"_id\"\n});\n\n\nfunction makeDroppable(el,model) {\n    // We need this to prevent the browser using its standard default when you drag over\n    el.addEventListener('dragover', function(e) {\n        e.preventDefault();\n    });\n\n    el.addEventListener('drop', function(e) {\n        e.preventDefault();\n\n       \n            var file =  e.dataTransfer.files[0];\n            var reader = new FileReader();\n            reader.onload = function() {\n                model.set(\"binary\", this.result);\n                model.save();\n               // $('img').remove()\n                //$('<img>').attr('title', file.name).attr('src', this.result).css('width', '50px').appendTo(el);\n            };\n            reader.readAsBinaryString(file);\n        \n    });\n\n}\n// VIEW \n// Attachments\n\nBackbone.View.Attachments = Backbone.View.extend({\n    initialize: function() {\n        this.model.get(\"_attachments\").on(\"add\", this.addAttachment, this)\n    },\n    // addAttachment is called whenever the addAttachment() method from the \n    // parent view class (below) is called. \n    addAttachment: function(model) {\n        var v = new this.options.view({\n            attributes: {\n                id: model.cid\n            },\n            model: model\n        });\n        v.listenTo(model, 'destroy', v.remove)\n        this.$el.append(v.render().el)\n    },\n    render: function() {\n        var that = this;\n        this.$el.empty();\n\n        this.model.get(\"attachments_order\").forEach(function(key) {\n            var subview = new that.options.view({\n                attributes: {\n                    id: key\n                },\n                model: that.model.get(\"_attachments\").get(key)\n            }).render()\n            makeDroppable(subview.el, that.model.get(\"_attachments\").get(key))\n            that.$el.append(subview.el);\n        })\n        return this;\n    }\n})\n\n// VIEW \n// CouchDB Model\n//\n\n\nBackbone.View.CouchDB = Backbone.View.extend({\n    // \n    addAttachment: function() {\n        this.model.get(\"_attachments\").add({})\n    },\n\n    // Extend this view and then call buildAttachments(view) from within the \n    // extended view's render() method, passing it an extended Backbone view\n    // to render each individual attachment. b\n    buildAttachments: function(view) {\n        var that = this;\n        var rendered_view = new Backbone.View.Attachments({\n            model: this.model,\n            view: view\n        })\n        var element = rendered_view.render().$el\n        element.sortable({\n            update: function(event, ui) {\n                that.model.updateAttachmentsOrder($(this).sortable(\"toArray\"));\n            }\n        })\n\n        return rendered_view.render().el\n    }\n})"],[1,"\r\n    url: function() {\r\n        return this.collection.url + \"/\" + this.id + \"/\" + this.rev;\r\n    },\r\n    // Overwrite the Backbone.sync method for CREATE and UPDATE calls\r\n    // as we want to send just the binary data of the attachment\r\n    // We shouldn't concern ourselves with GETting the attachment as \r\n    // attachments should always be created via the parent collection\r\n    //\r\n    // options is created by the Backbone.Model.save() method and \r\n    // it contains the success callback for the low-level jQuery $.ajax\r\n    // method. We augment it with our own options.\r\n    /* sync: function(method, model, options) {\r\n        options.processData = false; \r\n        options.data = this.get(\"binary\");\r\n        options.url = this.url();\r\n        options.type = \"PUT\";\r\n        options.contentType = this.get(\"content_type\");\r\n        var success = options.success;\r\n        options.success = function(resp) {\r\n            if(success) success(model,resp,options);\r\n            model.trigger('sync',model.resp,options);\r\n        }\r\n        if (method === \"update\") {\r\n            $.ajax(options);\r\n        }\r\n    }*/\r\n})\r\n\r\nBackbone.Collection.Attachments = Backbone.Collection.extend({\r\n    model: Backbone.Model.Attachment\r\n})\r\n\r\nBackbone.Model.CouchDB = Backbone.Model.extend({\r\n    defaults: {\r\n        \"_attachments\": new Backbone.Collection.Attachments,\r\n        \"attachments_order\": []\r\n    },\r\n\r\n    // We overwrite the parse function as when attachments come down the \r\n    // wire we need to parse them out into a separate Backbone collection\r\n    // and make each attachment a Backbone model\r\n    parse: function(resp) {\r\n        var result = {};\r\n        _.each(resp._attachments, function(value, key, list) {\r\n            var type_number = key.split(\"-\");\r\n            var number = type_number[1];\r\n            var type = type_number[0];\r\n            result[number] = result[number] || {}\r\n            result[number][type] = {\r\n                content_type: list[key].content_type,\r\n                length: list[key].length\r\n            }\r\n        })\r\n        var parsed_attachments = _.map(resp._attachments, function(value, key, list) {\r\n            return {\r\n                id: key,\r\n                content_type: list[key].content_type,\r\n                length: list[key].length,\r\n            }\r\n        }, this)\r\n        if (this.get(\"_attachments\") instanceof Backbone.Collection.Attachments) {\r\n            resp._attachments = this.get(\"_attachments\").reset(parsed_attachments)\r\n        }\r\n        else {\r\n            resp._attachments = new Backbone.Collection.Attachments(parsed_attachments)\r\n        }\r\n        resp._attachments.url = this.url() + \"/\" + resp._id + \"/attachments\"\r\n        return resp;\r\n    },\r\n\r\n    // We call this to save the order of attachments to the server\r\n    updateAttachmentsOrder: function(new_order) {\r\n        this.save({\r\n            \"attachments_order\": new_order\r\n        }, {\r\n            patch: true\r\n        });\r\n    },\r\n    sync: function() {\r\n       var args = arguments;\r\n       var xhr;\r\n       \r\n       // Because the FileReader API is asynchronous we have to use a callback\r\n       // style to call Backbone.sync when the files have been read\r\n       this.toJSON(function(attrs) {\r\n           args[2].attrs = attrs; // args[2] is the options object from arguments\r\n           xhr = Backbone.sync.apply(this, args);\r\n       })\r\n      return xhr;\r\n    },\r\n    // We override the toJSON function as this is what Backbone.sync uses to \r\n    // save our model to the server.\r\n    toJSON: function(callback) {\r\n        var json = _.clone(this.attributes);\r\n        json._attachments = {};\r\n        var attachments = this.get(\"_attachments\").filter(function(attachment) {\r\n            return attachment.get(\"binary\");\r\n        });\r\n \r\n        // We need to use a counter as loading of the files is asynchronous\r\n        // and we do not want to return until they are all loaded\r\n        var counter = 0;\r\n        _.each(attachments, function(attachment) {\r\n\r\n            var fReader = new FileReader();\r\n            fReader.onload = function(event) {\r\n                counter++;\r\n                var data = event.target.result.split(\",\")[1];\r\n                json._attachments[attachment.id] = {\r\n                    content_type: attachment.get(\"content_type\"),\r\n                    data: data\r\n                }\r\n                if (counter == attachments.length) {\r\n                   console.log(json)\r\n                    callback(json);\r\n                }\r\n            }\r\n            fReader.readAsDataURL(attachment.get(\"binary\"))\r\n        })\r\n    },\r\n    idAttribute: \"_id\"\r\n});\r\n\r\n\r\nfunction makeDroppable(el, model) {\r\n    // We need this to prevent the browser using its standard default when you drag over\r\n    el.addEventListener('dragover', function(e) {\r\n        e.preventDefault();\r\n    });\r\n\r\n    // Listen for a file to be dropped on the element\r\n    // and then get the file, set the binary data of the attachment\r\n    // and save it\r\n    el.addEventListener('drop', function(e) {\r\n        e.preventDefault();\r\n        var file = e.dataTransfer.files[0];\r\n\r\n        model.set(\"binary\", file);\r\n        // model.save();\r\n        $('img').remove()\r\n        $('<img>').attr('title', file.name).attr('src', this.result).css('width', '50px').appendTo(el);\r\n    });\r\n}\r\n// VIEWS \r\n// Attachments\r\n\r\nBackbone.View.Attachments = Backbone.View.extend({\r\n    initialize: function() {\r\n        this.model.get(\"_attachments\").on(\"add\", this.addAttachment, this)\r\n    },\r\n    // addAttachment is called whenever the addAttachment() method from the \r\n    // parent view class (below) is called. \r\n    addAttachment: function(model) {\r\n        var v = new this.options.view({\r\n            attributes: {\r\n                id: model.cid\r\n            },\r\n            model: model\r\n        });\r\n        v.listenTo(model, 'destroy', v.remove)\r\n        this.$el.append(v.render().el)\r\n    },\r\n    render: function() {\r\n        var that = this;\r\n        this.$el.empty();\r\n\r\n        this.model.get(\"attachments_order\").forEach(function(key) {\r\n            var subview = new that.options.view({\r\n                attributes: {\r\n                    id: key\r\n                },\r\n                model: that.model.get(\"_attachments\").get(key)\r\n            }).render()\r\n            makeDroppable(subview.el, that.model.get(\"_attachments\").get(key))\r\n            that.$el.append(subview.el);\r\n        })\r\n        return this;\r\n    }\r\n})\r\n\r\n// VIEW \r\n// CouchDB Model\r\n//\r\n\r\nBackbone.View.CouchDB = Backbone.View.extend({\r\n    // \r\n    addAttachment: function() {\r\n        this.model.get(\"_attachments\").add({})\r\n    },\r\n\r\n    // Extend this view and then call buildAttachments(view) from within the \r\n    // extended view's render() method, passing it an extended Backbone view\r\n    // to render each individual attachment. \r\n    buildAttachments: function(view) {\r\n        var that = this;\r\n        var rendered_view = new Backbone.View.Attachments({\r\n            model: this.model,\r\n            view: view\r\n        })\r\n        var element = rendered_view.render().$el\r\n        element.sortable({\r\n            update: function(event, ui) {\r\n                that.model.updateAttachmentsOrder($(this).sortable(\"toArray\"));\r\n            }\r\n        })\r\n\r\n        return rendered_view.render().el\r\n    }\r\n})\r"],[0,"\n"]],"start1":47,"start2":47,"length1":3823,"length2":7367}]],"length":7414,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361363963570,"patch":[[{"diffs":[[0,"({\r\n"],[-1,"    url: function() {\r\n        return this.collection.url + \"/\" + this.id + \"/\" + this.rev;\r\n    },"],[0,"\r\n  "]],"start1":49,"start2":49,"length1":107,"length2":8}]],"length":7315,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361364665519,"patch":[[{"diffs":[[0,"     var"],[1," xhr,"],[0," args = "]],"start1":2969,"start2":2969,"length1":16,"length2":21},{"diffs":[[0,"s;\r\n"],[-1,"       var xhr;\r\n"],[0,"    "]],"start1":2998,"start2":2998,"length1":25,"length2":8},{"diffs":[[0,"    })\r\n"],[-1,"\r\n"],[0,"        "]],"start1":7240,"start2":7240,"length1":18,"length2":16},{"diffs":[[0,"().el\r\n    }\r\n})"],[-1,"\r\n"]],"start1":7283,"start2":7283,"length1":18,"length2":16}]],"length":7299,"saved":false}
{"ts":1361364681790,"patch":[[{"diffs":[[0,"  }, this)\r\n"],[1,"        console.log(parsed_attachments)\r\n"],[0,"        if ("]],"start1":2282,"start2":2282,"length1":24,"length2":65}]],"length":7340,"saved":false}
{"ts":1361364738461,"patch":[[{"diffs":[[0,"s)\r\n"],[-1,"        console.log(parsed_attachments)\r\n"],[0,"    "]],"start1":2290,"start2":2290,"length1":49,"length2":8},{"diffs":[[0,"d_attachments)\r\n"],[1,"            console.log(resp._attachments)\r\n"],[0,"        }\r\n     "]],"start1":2562,"start2":2562,"length1":32,"length2":76}]],"length":7343,"saved":false}
{"ts":1361364776778,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(resp._attachments)"],[0,"\r\n  "]],"start1":2586,"start2":2586,"length1":38,"length2":8}]],"length":7313,"saved":false}
{"ts":1361365636682,"patch":[[{"diffs":[[0,"   \r\n        }\r\n"],[1,"        console.log(resp._attachments)\r\n"],[0,"        resp._at"]],"start1":2587,"start2":2587,"length1":32,"length2":72}]],"length":7353,"saved":false}
{"ts":1361365792940,"patch":[[{"diffs":[[0," }\r\n        })\r\n"],[1,"        console.log(resp._attachments)\r\n"],[0,"        var pars"]],"start1":2011,"start2":2011,"length1":32,"length2":72}]],"length":7393,"saved":false}
{"ts":1361365865248,"patch":[[{"diffs":[[0," }\r\n"],[-1,"        console.log(resp._attachments)\r\n"],[0,"    "]],"start1":2639,"start2":2639,"length1":48,"length2":8}]],"length":7353,"saved":false}
{"ts":1361365953544,"patch":[[{"diffs":[[0,"nction(resp) {\r\n"],[1,"        var resp = _.clone(resp)\r\n"],[0,"        var resu"]],"start1":1579,"start2":1579,"length1":32,"length2":66}]],"length":7387,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361368994719,"patch":[[{"diffs":[[0,"nction() {\r\n"],[1,"        console.log(\"Sent\")\r\n"],[0,"       var x"]],"start1":3043,"start2":3043,"length1":24,"length2":53}]],"length":7416,"saved":false}
{"ts":1361369501561,"patch":[[{"diffs":[[0," {\r\n"],[-1,"        console.log(\"Sent\")\r\n"],[0,"    "]],"start1":3051,"start2":3051,"length1":37,"length2":8},{"diffs":[[0,"is, args);\r\n"],[1,"           \r\n        console.log(\"Sent\")\r\n"],[0,"       })\r\n "]],"start1":3408,"start2":3408,"length1":24,"length2":66}]],"length":7429,"saved":false}
{"ts":1361369582459,"patch":[[{"diffs":[[0,"    "],[-1," console.log(\"Sent\")"],[0,"\r\n  "]],"start1":3436,"start2":3436,"length1":28,"length2":8},{"diffs":[[0,"  });\r\n "],[1,"       console.log(attachments)"],[0,"\r\n      "]],"start1":3844,"start2":3844,"length1":16,"length2":47}]],"length":7440,"saved":false}
{"ts":1361369596785,"patch":[[{"diffs":[[0,".log(attachments"],[1,".length == 0"],[0,")\r\n        // We"]],"start1":3866,"start2":3866,"length1":32,"length2":44}]],"length":7452,"saved":false}
{"ts":1361369605129,"patch":[[{"diffs":[[0,"ength =="],[1,"="],[0," 0)\r\n   "]],"start1":3884,"start2":3884,"length1":16,"length2":17}]],"length":7453,"saved":false}
{"ts":1361369638717,"patch":[[{"diffs":[[0,"       c"],[-1,"onsole.log"],[1,"allback(json) if "],[0,"(attachm"]],"start1":3852,"start2":3852,"length1":26,"length2":33}]],"length":7460,"saved":false}
{"ts":1361369649536,"patch":[[{"diffs":[[0,"\n       "],[-1," callback(json)"],[0," if (att"]],"start1":3850,"start2":3850,"length1":31,"length2":16},{"diffs":[[0,"h === 0)"],[1," {\r\n            callback(json) \r\n            return;\r\n        }"],[0,"\r\n      "]],"start1":3880,"start2":3880,"length1":16,"length2":79}]],"length":7508,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361398557350,"patch":[[{"diffs":[[0,"h === 0) {\r\n"],[1,"            delete json._attachments\r\n"],[0,"            "]],"start1":3880,"start2":3880,"length1":24,"length2":62}]],"length":7546,"saved":false}
{"ts":1361398559462,"patch":[[{"diffs":[[0,"_attachments"],[1,";"],[0,"\r\n          "]],"start1":3916,"start2":3916,"length1":24,"length2":25}]],"length":7547,"saved":false}
{"ts":1361398573214,"patch":[[{"diffs":[[0,"es);"],[-1,"\r\n"],[0,"        "],[-1,"json._attachments = {};"],[0,"\r\n  "]],"start1":3671,"start2":3671,"length1":41,"length2":16},{"diffs":[[0," {\r\n"],[-1,"            delete json._attachments;\r\n"],[0,"    "]],"start1":3863,"start2":3863,"length1":47,"length2":8},{"diffs":[[0,"rn;\r\n        }\r\n"],[1,"        json._attachments = {};\r\n"],[0,"        // We ne"]],"start1":3912,"start2":3912,"length1":32,"length2":65}]],"length":7516,"saved":false}
{"ts":1361398620597,"patch":[[{"diffs":[[0,"tes);   "],[1,"\r\n"],[0,"     "],[1,"   \r\n        json._attachments = {};"],[0,"\r\n      "]],"start1":3670,"start2":3670,"length1":21,"length2":59},{"diffs":[[0," }\r\n"],[-1,"        json._attachments = {};\r\n"],[0,"    "]],"start1":3962,"start2":3962,"length1":41,"length2":8}]],"length":7521,"saved":false}
{"ts":1361398626077,"patch":[[{"diffs":[[0,"s);   \r\n"],[-1,"        \r\n"],[0,"        "]],"start1":3672,"start2":3672,"length1":26,"length2":16}]],"length":7511,"saved":false}
{"ts":1361398711515,"patch":[[{"diffs":[[0,"   this."],[-1,"toJSON"],[1,"saveForCouchDB"],[0,"(functio"]],"start1":3252,"start2":3252,"length1":22,"length2":30},{"diffs":[[0,"r.\r\n    "],[-1,"toJSON"],[1,"saveForCouchDB"],[0,": functi"]],"start1":3601,"start2":3601,"length1":22,"length2":30}]],"length":7527,"saved":false}
{"ts":1361399178582,"patch":[[{"diffs":[[0,";\r\n        });\r\n"],[1,"        \r\n        // If no files have been added to the model then we return straight away\r\n"],[0,"        if (atta"]],"start1":3854,"start2":3854,"length1":32,"length2":124}]],"length":7619,"saved":false}
{"ts":1361399230983,"patch":[[{"diffs":[[0,");\r\n"],[-1,"           \r\n       \r\n"],[0,"    "]],"start1":3424,"start2":3424,"length1":30,"length2":8}]],"length":7597,"saved":false}
{"ts":1361400676445,"patch":[[{"diffs":[[0,"(attachment) {\r\n"],[1,"            console.log(attachment.get(\"binary\"))\r\n"],[0,"            retu"]],"start1":3773,"start2":3773,"length1":32,"length2":83}]],"length":7648,"saved":false}
{"ts":1361400743895,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(attachment.get(\"binary\"))"],[0,"\r\n  "]],"start1":3797,"start2":3797,"length1":45,"length2":8},{"diffs":[[0,"   });\r\n        "],[1,"console.log(attachments)"],[0,"\r\n        // If "]],"start1":3854,"start2":3854,"length1":32,"length2":56}]],"length":7635,"saved":false}
{"ts":1361400982520,"patch":[[{"diffs":[[0,"   }*/\r\n})\r\n"],[1,"spyOn(FileReader)"],[0,"\r\nBackbone.C"]],"start1":1072,"start2":1072,"length1":24,"length2":41},{"diffs":[[0,");\r\n"],[-1,"        console.log(attachments)\r\n"],[0,"    "]],"start1":3875,"start2":3875,"length1":42,"length2":8}]],"length":7618,"saved":false}
{"ts":1361401007074,"patch":[[{"diffs":[[0,"eReader)"],[1,";\r\n"],[0,"\r\nBackbo"]],"start1":1093,"start2":1093,"length1":16,"length2":19}]],"length":7621,"saved":false}
{"ts":1361401036979,"patch":[[{"diffs":[[0,"\n})\r"],[-1,"\nspyOn(FileReader);\r"],[0,"\n\r\nB"]],"start1":1079,"start2":1079,"length1":28,"length2":8}]],"length":7601,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361444165167,"patch":[[{"diffs":[[0,"tend({\r\n"],[1,"    updateBinary: function(file) {\r\n        \r\n    }"],[0,"\r\n    //"]],"start1":45,"start2":45,"length1":16,"length2":67}]],"length":7652,"saved":false}
{"ts":1361444186225,"patch":[[{"diffs":[[0," {\r\n        "],[1,"this.set(\"binary\", file)"],[0,"\r\n    }\r\n   "]],"start1":85,"start2":85,"length1":24,"length2":48}]],"length":7676,"saved":false}
{"ts":1361444372646,"patch":[[{"diffs":[[0,"ry\", file)\r\n"],[1,"        this.set(\"content_type\", file.type)\r\n"],[0,"    }\r\n    /"]],"start1":111,"start2":111,"length1":24,"length2":69}]],"length":7721,"saved":false}
